BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
    hInst = hInstance;

    int windowWidth = 800;
    int windowHeight = 600;
    int screenWidth = GetSystemMetrics(SM_CXSCREEN);
    int screenHeight = GetSystemMetrics(SM_CYSCREEN);
    int xPos = (screenWidth - windowWidth)  2;
    int yPos = (screenHeight - windowHeight)  2;

    hMainWindow = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
        xPos, yPos, windowWidth, windowHeight, nullptr, nullptr, hInstance, nullptr);

    if (!hMainWindow)
    {
        return FALSE;
    }

    HWND hComboBox = CreateWindowW(LCOMBOBOX, NULL, WS_CHILD  WS_VISIBLE  CBS_DROPDOWNLIST,
        40, 40, 220, 100, hMainWindow, (HMENU)IDC_COMBOBOX_choice, hInstance, NULL);

    SendMessage(hComboBox, CB_ADDSTRING, 0, (LPARAM)LКалькулятор ИМТ);
    SendMessage(hComboBox, CB_ADDSTRING, 0, (LPARAM)LКалькулятор каллорий);

    HWND hButtonOpen = CreateWindowW(LBUTTON, LОткрыть, WS_CHILD  WS_VISIBLE  BS_PUSHBUTTON,
        275, 36, 100, 30, hMainWindow, (HMENU)IDC_BUTTON_openc, hInstance, NULL);

     Добавляем кнопку для закрытия программы
    HWND hButtonCloseProgram = CreateWindowW(LBUTTON, LЗакрыть программу, WS_CHILD  WS_VISIBLE  BS_PUSHBUTTON,
        275, 100, 150, 30, hMainWindow, (HMENU)IDC_BUTTON_CLOSE_PROGRAM, hInstance, NULL);

    ShowWindow(hMainWindow, nCmdShow);
    UpdateWindow(hMainWindow);

    return TRUE;
}


LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    static HWND hComboBox;

    switch (message)
    {
    case WM_CREATE
        hComboBox = GetDlgItem(hWnd, IDC_COMBOBOX_choice);
        break;

    case WM_COMMAND
        if (LOWORD(wParam) == IDC_BUTTON_openc)
        {
            hComboBox = GetDlgItem(hWnd, IDC_COMBOBOX_choice);
            int index = SendMessage(hComboBox, CB_GETCURSEL, 0, 0);
            if (index == 0)
            {
                EnableWindow(hWnd, FALSE);   Отключаем главное окно
                CreateChildWindow(hWnd, szChildWindowClassBMI, LКалькулятор ИМТ, ChildWndProcBMI);
            }
            else if (index == 1)
            {
                EnableWindow(hWnd, FALSE);   Отключаем главное окно
                CreateChildWindow(hWnd, szChildWindowClassCalories, LКалькулятор каллорий, ChildWndProcCalories);
            }
            else
            {
                MessageBox(hWnd, LВыберите пункт из списка, LОшибка, MB_OK);
            }
        }
        else if (LOWORD(wParam) == IDC_BUTTON_CLOSE_PROGRAM)
        {
            PostQuitMessage(0);   Завершить программу
        }
        break;

    case WM_DESTROY
        PostQuitMessage(0);
        break;

    default
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}


ATOM RegisterChildWindowClass(HINSTANCE hInstance, LPCWSTR className, WNDPROC childWndProc)
{
    WNDCLASSEXW wcex;
    wcex.cbSize = sizeof(WNDCLASSEX);
    wcex.style = CS_HREDRAW  CS_VREDRAW;
    wcex.lpfnWndProc = childWndProc;
    wcex.cbClsExtra = 0;
    wcex.cbWndExtra = 0;
    wcex.hInstance = hInstance;
    wcex.hIcon = LoadIcon(nullptr, IDI_APPLICATION);
    wcex.hCursor = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wcex.lpszMenuName = nullptr;
    wcex.lpszClassName = className;
    wcex.hIconSm = LoadIcon(nullptr, IDI_APPLICATION);

    return RegisterClassExW(&wcex);
}

HWND CreateChildWindow(HWND hParent, LPCWSTR className, LPCWSTR windowTitle, WNDPROC childWndProc)
{
    RegisterChildWindowClass(hInst, className, childWndProc);

    int windowWidth = 400;
    int windowHeight = 500;
    int screenWidth = GetSystemMetrics(SM_CXSCREEN);
    int screenHeight = GetSystemMetrics(SM_CYSCREEN);
    int xPos = (screenWidth - windowWidth)  2;
    int yPos = (screenHeight - windowHeight)  2;

    HWND hWndChild = CreateWindowW(className, windowTitle, WS_OVERLAPPEDWINDOW,
        xPos, yPos, windowWidth, windowHeight, hParent, nullptr, hInst, nullptr);

    if (hWndChild)
    {
        ShowWindow(hWndChild, SW_SHOW);
        UpdateWindow(hWndChild);
    }
    return hWndChild;
}

 Процедура для окна ИМТ
LRESULT CALLBACK ChildWndProcBMI(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    static HWND hEditHeight, hEditWeight, hButtonCalculate, hButtonClose;

    switch (message)
    {
    case WM_CREATE
        hEditHeight = CreateWindowW(LEDIT, NULL, WS_CHILD  WS_VISIBLE  WS_BORDER  ES_NUMBER,
            50, 50, 150, 20, hWnd, (HMENU)IDC_EDIT_HEIGHT, hInst, NULL);
        CreateWindowW(LSTATIC, LРост (см), WS_CHILD  WS_VISIBLE,
            50, 30, 100, 20, hWnd, NULL, hInst, NULL);

        hEditWeight = CreateWindowW(LEDIT, NULL, WS_CHILD  WS_VISIBLE  WS_BORDER  ES_NUMBER,
            50, 100, 150, 20, hWnd, (HMENU)IDC_EDIT_WEIGHT, hInst, NULL);
        CreateWindowW(LSTATIC, LВес (кг), WS_CHILD  WS_VISIBLE,
            50, 80, 100, 20, hWnd, NULL, hInst, NULL);

        hButtonCalculate = CreateWindowW(LBUTTON, LРассчитать ИМТ, WS_CHILD  WS_VISIBLE  BS_PUSHBUTTON,
            50, 150, 150, 30, hWnd, (HMENU)IDC_BUTTON_CALCULATE_BMI, hInst, NULL);

        hButtonClose = CreateWindowW(LBUTTON, LЗакрыть, WS_CHILD  WS_VISIBLE  BS_PUSHBUTTON,
            50, 200, 150, 30, hWnd, (HMENU)IDC_BUTTON_CLOSE, hInst, NULL);
        break;

    case WM_COMMAND
        if (LOWORD(wParam) == IDC_BUTTON_CALCULATE_BMI)
        {
            WCHAR buffer[100];
            GetWindowText(hEditHeight, buffer, 100);
            double height = _wtof(buffer)  100;  Convert to meters
            GetWindowText(hEditWeight, buffer, 100);
            double weight = _wtof(buffer);
            bmiResult = weight  (height  height);
            swprintf(buffer, 100, LВаш ИМТ %.2f, bmiResult);
            MessageBox(hWnd, buffer, LРезультат, MB_OK);
        }
        else if (LOWORD(wParam) == IDC_BUTTON_CLOSE)
        {
            EnableWindow(hMainWindow, TRUE);     Включить главное окно
            ShowWindow(hMainWindow, SW_RESTORE);   Явно развернуть главное окно
            SetFocus(hMainWindow);               Вернуть фокус главному окну
            DestroyWindow(hWnd);                 Уничтожить дочернее окно
        }
        break;

    case WM_DESTROY
        EnableWindow(hMainWindow, TRUE);     Включить главное окно
        ShowWindow(hMainWindow, SW_RESTORE);   Развернуть главное окно
        SetFocus(hMainWindow);               Вернуть фокус главному окну
        break;

    default
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}